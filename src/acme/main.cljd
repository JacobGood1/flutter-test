(ns acme.main
  (:require ["package:flutter/material.dart" :as m]
            [cljd.flutter :as f]))

(declare start-screen)
(defonce state (atom {:active-screen start-screen}))

(def quiz-questions
  [["What are the main building blocks of Flutter UIs?"
    ["Widgets"
     "Components"
     "Blocks"
     "Functions"]]
   ["How are Flutter UIs built?"
    ["By combining widgets in code"
     "By combining widgets in a visual editor"
     "By defining widgets in config files"
     "By using XCode for iOS and Android Studio for Android"]]
   ["What's the purpose of a StatefulWidget?"
    ["Update UI as data changes"
     "Update data as UI changes"
     "Ignore data changes"
     "Render UI that does not depend on data"]]
   ["Which widget should you try to use more often: StatelessWidget or StatefulWidget?"
    ["StatelessWidget"
     "StatefulWidget"
     "Both are equally good"
     "None of the above"]]
   ["What happens if you change data in a StatelessWidget?"
    ["The UI is not updated"
     "The UI is updated"
     "The closest StatefulWidget is updated"
     "Any nested StatefulWidgets are updated"]]
   ["How should you update data inside of StatefulWidgets?"
    ["By calling setState()"
     "By calling updateData()"
     "By calling updateUI()"
     "By calling updateState()"]]])



(defn switch-screen!
  [screen-to-switch-to]
  (fn []
    (swap! state assoc :active-screen screen-to-switch-to)
    nil))

(def quiz-screen
  (m/Text "Quiz Screen"))

;(defn styled-text
;  [text-to-style]
;  (m/Text
;    text-to-style
;    .style (m/TextStyle .color m.Colors/white
;                        .fontSize 40.0)))
;
;(defonce state (atom "assets/images/dice-1.png"))
;
;(defn randomize-dice
;  []
;  (swap! state
;         clojure.string/replace
;         #"[0-9]"
;         (-> (rand-int 6)
;             inc
;             str))
;  nil)
;
;(defn dice
;  []
;  (f/widget
;    :watch [S state]
;    (m/Image.asset
;                   S
;                   .width 200.0
;                   .height 200.0)))

;(defn gradiant-container
;  []
;  (m/Container
;    .decoration
;    (m/BoxDecoration
;      .gradient
;      (m/LinearGradient
;        .begin m.Alignment/topLeft
;        .end m.Alignment/bottomRight
;        .colors
;        [m.Colors/red m.Colors/yellow]))
;    .child
;    (m/Center
;      .child
;      (m/Column
;        .mainAxisSize m.MainAxisSize/min
;        .children
;        [(dice)
;         (m/TextButton .onPressed randomize-dice
;                       .child (styled-text "Roll the dice!"))]))))

(def start-screen
  (m/Center
    .child
    (m/Column
      .mainAxisSize m.MainAxisSize/min
      .children
      [(m/Image.asset
         "assets/images/quiz-logo.png"
         .color
         (m/Color.fromARGB 150 255 255 255)
         .width 200.0
         .height 200.0)
       (m/SizedBox .height 80)
       (m/Text "Start Screen"
               .style
               (m/TextStyle .color m.Colors/white
                             .fontSize 24.0))
       (m/SizedBox .height 30)
       (m/OutlinedButton.icon
         .style
         (m.OutlinedButton/styleFrom
           .foregroundColor m.Colors/white)
         .onPressed
         (switch-screen! quiz-screen)
         .icon
         (m/Icon (m.Icons/arrow_right_alt))
         .label
         (m/Text "Start the quiz!"))])))

(def quiz-logo
  (m/Image.asset
    "assets/images/quiz-logo.png"
    .width 200.0
    .height 200.0))

(defn main []
  (f/run
    (m/MaterialApp
      .home
      (m/Scaffold
        .body
        (f/widget
          :watch [{screen :active-screen} state]
         (m/Container
           .decoration
           (m/BoxDecoration
             .gradient
             (m/LinearGradient
               .begin m.Alignment/topLeft
               .end m.Alignment/bottomRight
               .colors
               [(m.Color/fromARGB 255 78 13 151)
                (m.Color/fromARGB 255 107 15 168)]))
           .child screen))))))
        ;(m/Center)))))
        ;        .child
        ;        (m/Column
        ;          .mainAxisSize m.MainAxisSize/min
        ;          .children [quiz-logo
        ;                     (m/SizedBox .height 30.0)
        ;                     (m/Text "Learn Flutter The Fun Way"
        ;                       .style (m/TextStyle .color m.Colors/white
        ;                                           .fontSize 20.0))
        ;                     (m/SizedBox .height 30.0)
        ;                     (m/Text "Start the quiz!"
        ;                             .style (m/TextStyle .color m.Colors/white
        ;                                                 .fontSize 20.0))]))))))
                              ;    text-to-style
                              ;    .style (m/TextStyle .color m.Colors/white
                              ;                        .fontSize 40.0))]))))))

      ;.backgroundColor m.Colors/purple)))