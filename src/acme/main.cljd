(ns acme.main
  (:require ["package:flutter/material.dart" :as m]
            [cljd.flutter :as f]))

(declare start-screen)
(declare quiz-screen)
(defonce state
         (atom
           {:active-screen start-screen
            :counter 0
            :correct-answers 0}))

(def quiz-questions
  [["What are the main building blocks of Flutter UIs?"
    ["Widgets"
     "Components"
     "Blocks"
     "Functions"]]
   ["How are Flutter UIs built?"
    ["By combining widgets in code"
     "By combining widgets in a visual editor"
     "By defining widgets in config files"
     "By using XCode for iOS and Android Studio for Android"]]
   ["What's the purpose of a StatefulWidget?"
    ["Update UI as data changes"
     "Update data as UI changes"
     "Ignore data changes"
     "Render UI that does not depend on data"]]
   ["Which widget should you try to use more often: StatelessWidget or StatefulWidget?"
    ["StatelessWidget"
     "StatefulWidget"
     "Both are equally good"
     "None of the above"]]
   ["What happens if you change data in a StatelessWidget?"
    ["The UI is not updated"
     "The UI is updated"
     "The closest StatefulWidget is updated"
     "Any nested StatefulWidgets are updated"]]
   ["How should you update data inside of StatefulWidgets?"
    ["By calling setState()"
     "By calling updateData()"
     "By calling updateUI()"
     "By calling updateState()"]]])


(defn validate
  [correct-answer answer]
  (if (= answer correct-answer)
    (do (println "true") true)
    (println "completely false in every way scrub!!")))

(defn switch-screen!
  [correct-answer answer]
  (fn []
    (if (validate correct-answer answer)
      (do (swap! state update :correct-answers inc)
          (println "correct answers: " (:correct-answers @state))))
    (let [{:keys [counter]} @state]
      (if (= counter (count quiz-questions))
        (do (swap! state assoc :active-screen start-screen)
            (swap! state assoc :counter 0))
        (do
          (swap! state assoc :active-screen (quiz-screen counter))
          (swap! state update :counter inc))))

    nil))


(defn button-elevator
  [correct-answer]
  (fn [answer]
    (m/ElevatedButton
      .style
      (m.ElevatedButton/styleFrom
        .backgroundColor (m.Color/fromARGB 255 33 1 95)
        .foregroundColor m.Colors/white
        .shape (m/RoundedRectangleBorder
                .borderRadius (m.BorderRadius/circular 30.0)))
      .onPressed
      (switch-screen! correct-answer answer)
      .child (m/Text answer))))

(defn quiz-screen
  [quiz-number]
  (let [[question [correct-answer & _ :as questions]] (nth quiz-questions quiz-number)
        children (->> (map (button-elevator correct-answer)
                           (shuffle questions))
                      (cons (m/SizedBox .height 30))
                      (cons (m/Text question)))]

    (m/SizedBox
      .width
      double/infinity
      .child
      (m/Column
        .mainAxisAlignment m.MainAxisAlignment/center
        .children
        children))))


;(defn styled-text
;  [text-to-style]
;  (m/Text
;    text-to-style
;    .style (m/TextStyle .color m.Colors/white
;                        .fontSize 40.0)))
;
;(defonce state (atom "assets/images/dice-1.png"))
;
;(defn randomize-dice
;  []
;  (swap! state
;         clojure.string/replace
;         #"[0-9]"
;         (-> (rand-int 6)
;             inc
;             str))
;  nil)
;
;(defn dice
;  []
;  (f/widget
;    :watch [S state]
;    (m/Image.asset
;                   S
;                   .width 200.0
;                   .height 200.0)))

;(defn gradiant-container
;  []
;  (m/Container
;    .decoration
;    (m/BoxDecoration
;      .gradient
;      (m/LinearGradient
;        .begin m.Alignment/topLeft
;        .end m.Alignment/bottomRight
;        .colors
;        [m.Colors/red m.Colors/yellow]))
;    .child
;    (m/Center
;      .child
;      (m/Column
;        .mainAxisSize m.MainAxisSize/min
;        .children
;        [(dice)
;         (m/TextButton .onPressed randomize-dice
;                       .child (styled-text "Roll the dice!"))]))))

(def start-screen
  (let []
    (swap! state assoc :score 0)
    (m/Center
      .child
      (m/Column
        .mainAxisSize m.MainAxisSize/min
        .children
        [(m/Image.asset
           "assets/images/quiz-logo.png"
           .color
           (m/Color.fromARGB 150 255 255 255)
           .width 200.0
           .height 200.0)
         (m/SizedBox .height 80)
         (m/Text "Start Screen"
                 .style
                 (m/TextStyle .color m.Colors/white
                               .fontSize 24.0))
         (m/SizedBox .height 30)
         (m/OutlinedButton.icon
           .style
           (m.OutlinedButton/styleFrom
             .foregroundColor m.Colors/white)
           .onPressed
           (switch-screen! "not" "=")
           .icon
           (m/Icon (m.Icons/arrow_right_alt))
           .label
           (m/Text "Start the quiz!"))]))))

(def quiz-logo
  (m/Image.asset
    "assets/images/quiz-logo.png"
    .width 200.0
    .height 200.0))

(defn main []
  (f/run
    (m/MaterialApp
      .home
      (m/Scaffold
        .body
        (f/widget
          :watch [{screen :active-screen} state]
         (m/Container
           .decoration
           (m/BoxDecoration
             .gradient
             (m/LinearGradient
               .begin m.Alignment/topLeft
               .end m.Alignment/bottomRight
               .colors
               [(m.Color/fromARGB 255 78 13 151)
                (m.Color/fromARGB 255 107 15 168)]))
           .child screen))))))
        ;(m/Center)))))
        ;        .child
        ;        (m/Column
        ;          .mainAxisSize m.MainAxisSize/min
        ;          .children [quiz-logo
        ;                     (m/SizedBox .height 30.0)
        ;                     (m/Text "Learn Flutter The Fun Way"
        ;                       .style (m/TextStyle .color m.Colors/white
        ;                                           .fontSize 20.0))
        ;                     (m/SizedBox .height 30.0)
        ;                     (m/Text "Start the quiz!"
        ;                             .style (m/TextStyle .color m.Colors/white
        ;                                                 .fontSize 20.0))]))))))
                              ;    text-to-style
                              ;    .style (m/TextStyle .color m.Colors/white
                              ;                        .fontSize 40.0))]))))))

      ;.backgroundColor m.Colors/purple)))